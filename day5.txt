def Mahesh(func):
    def wrapper():
        print("Hello Mahesh")
        func()
        print("Hello Kranthi")
        func()
    return wrapper
@Mahesh
def Kranthi():
    print("Hello Niwas")
Kranthi()



def Mahesh(func):  # Decorator function
    def wrapper():
        print("Hello Mahesh")
        func()
        print("Hello Kranthi")
        func()
    return wrapper

def Kranthi():  # Original function
    print("Hello Niwas")

Kranthi = Mahesh(Kranthi)  # Apply decorator manually

Kranthi()  # Call the decorated version



def Mahesh(func):
    def wrapper(*args, **kwargs):
        print("Before the function call")
        result = func(*args, **kwargs)
        print("After the function call")
        print(result)
        
    return wrapper

@Mahesh
def greet(name, age):
    return f"My name is {name} and I am {age} years old"

greet("Mahesh", 22)

def Mahesh(func):
    
    def wrapper(*args,**kwargs):
        
        x=func(*args,**kwargs)
        if(type(x)==str) and (not x.isdigit()):
            return x.upper()
        elif(x.isdigit()):
            return int(x)
        else:
            return x
            
        
    return wrapper

        
@Mahesh
def String(l):
    return l
l=input("Enter the value:")
num=String(l)
print(type(num))
    
    
    
    
    
def decor1(func):
    def inner():
        x=func()
        return x*x
    return inner
def decor2(func):
    def inner():
        x=func()
        return x*2
    return inner

@decor2
@decor1

def num():
    return 10
print(num())






def Mahesh(input):
    
    def decorator(func):
        
        def wrapper(*args):
            
            if not isinstance(*args,input):
                return TypeError(f'Expected {input},got {type(*args)}')
            return func(*args)
        return wrapper
    return decorator
    
@Mahesh(int)

def square(n):
    return n*n
    
@Mahesh(str)

def Upper(text):
    
    return text.upper()
    
print(square(5))
print(Upper("mahi"))
print(square("Tarak"))




def Mahesh(func):
    
    def wrapper(n):
        print("After double the input")
        x=func(n)
        return x*2
    return wrapper 
@Mahesh       
def double(n):
    return n
    
print(double(5))




def Decorator(func):
    def wrapper(*args):
        d = func(*args)  # This returns the length
        full_msg = args[0] + " Welcome"
        print('-' * d)
        print(full_msg)
        print('-' * d)
    return wrapper

@Decorator
def Line(name):
    message = name + " Welcome"
    return len(message)

Line("Mahesh")


a = lambda x: x[::-1] if isinstance(x, str) else x
print(a("Mahesh"))      
print(a(123))  

b=lambda x,y: x if x>y else y
print(b(10,20))


b = lambda x, y, z: x if (x > y and x > z) else (y if y > z else z)
print(b(10,20,30))

c=lambda num:"even" if(num%2==0) else "odd"
print(c(21))

def myfunc(n):
  c=lambda 

d={"name":"Mahesh","sec":"Btech","loc":"Andra"}
x = sorted(d, key=myfunc)
print(x)


l=[1,3,2,5,4,7,6,8,9]

c=[i for i in l if (lambda i:(i%2==0))(i)]
print(c)

l = [1, 3, 2, 5, 4, 7, 6, 8, 9]
evens = [i for i in l if i % 2 == 0]
print("Even numbers:", evens)


    

    

    
    
    









